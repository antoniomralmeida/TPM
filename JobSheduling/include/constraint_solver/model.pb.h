// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: constraint_solver/model.proto

#ifndef PROTOBUF_constraint_5fsolver_2fmodel_2eproto__INCLUDED
#define PROTOBUF_constraint_5fsolver_2fmodel_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "constraint_solver/search_limit.pb.h"
// @@protoc_insertion_point(includes)

namespace operations_research {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_constraint_5fsolver_2fmodel_2eproto();
void protobuf_AssignDesc_constraint_5fsolver_2fmodel_2eproto();
void protobuf_ShutdownFile_constraint_5fsolver_2fmodel_2eproto();

class CpArgument;
class CpConstraint;
class CpExtension;
class CpIntegerExpression;
class CpIntegerMatrix;
class CpIntervalVariable;
class CpModel;
class CpObjective;
class CpSequenceVariable;
class CpVariableGroup;

enum CpArgument_Type {
  CpArgument_Type_UNDEFINED = 0,
  CpArgument_Type_INTEGER_VALUE = 1,
  CpArgument_Type_INTEGER_ARRAY = 2,
  CpArgument_Type_EXPRESSION = 3,
  CpArgument_Type_EXPRESSION_ARRAY = 4,
  CpArgument_Type_INTERVAL = 5,
  CpArgument_Type_INTERVAL_ARRAY = 6,
  CpArgument_Type_SEQUENCE = 7,
  CpArgument_Type_SEQUENCE_ARRAY = 8,
  CpArgument_Type_INTEGER_MATRIX = 9,
  CpArgument_Type_CpArgument_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CpArgument_Type_CpArgument_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CpArgument_Type_IsValid(int value);
const CpArgument_Type CpArgument_Type_Type_MIN = CpArgument_Type_UNDEFINED;
const CpArgument_Type CpArgument_Type_Type_MAX = CpArgument_Type_INTEGER_MATRIX;
const int CpArgument_Type_Type_ARRAYSIZE = CpArgument_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* CpArgument_Type_descriptor();
inline const ::std::string& CpArgument_Type_Name(CpArgument_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    CpArgument_Type_descriptor(), value);
}
inline bool CpArgument_Type_Parse(
    const ::std::string& name, CpArgument_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CpArgument_Type>(
    CpArgument_Type_descriptor(), name, value);
}
// ===================================================================

class CpIntegerMatrix : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.CpIntegerMatrix) */ {
 public:
  CpIntegerMatrix();
  virtual ~CpIntegerMatrix();

  CpIntegerMatrix(const CpIntegerMatrix& from);

  inline CpIntegerMatrix& operator=(const CpIntegerMatrix& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CpIntegerMatrix& default_instance();

  void Swap(CpIntegerMatrix* other);

  // implements Message ----------------------------------------------

  inline CpIntegerMatrix* New() const { return New(NULL); }

  CpIntegerMatrix* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CpIntegerMatrix& from);
  void MergeFrom(const CpIntegerMatrix& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CpIntegerMatrix* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 rows = 1;
  void clear_rows();
  static const int kRowsFieldNumber = 1;
  ::google::protobuf::int32 rows() const;
  void set_rows(::google::protobuf::int32 value);

  // optional int32 columns = 2;
  void clear_columns();
  static const int kColumnsFieldNumber = 2;
  ::google::protobuf::int32 columns() const;
  void set_columns(::google::protobuf::int32 value);

  // repeated int64 values = 3;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 3;
  ::google::protobuf::int64 values(int index) const;
  void set_values(int index, ::google::protobuf::int64 value);
  void add_values(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      values() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:operations_research.CpIntegerMatrix)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 rows_;
  ::google::protobuf::int32 columns_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > values_;
  mutable int _values_cached_byte_size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_constraint_5fsolver_2fmodel_2eproto();
  friend void protobuf_AssignDesc_constraint_5fsolver_2fmodel_2eproto();
  friend void protobuf_ShutdownFile_constraint_5fsolver_2fmodel_2eproto();

  void InitAsDefaultInstance();
  static CpIntegerMatrix* default_instance_;
};
// -------------------------------------------------------------------

class CpArgument : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.CpArgument) */ {
 public:
  CpArgument();
  virtual ~CpArgument();

  CpArgument(const CpArgument& from);

  inline CpArgument& operator=(const CpArgument& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CpArgument& default_instance();

  void Swap(CpArgument* other);

  // implements Message ----------------------------------------------

  inline CpArgument* New() const { return New(NULL); }

  CpArgument* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CpArgument& from);
  void MergeFrom(const CpArgument& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CpArgument* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CpArgument_Type Type;
  static const Type UNDEFINED =
    CpArgument_Type_UNDEFINED;
  static const Type INTEGER_VALUE =
    CpArgument_Type_INTEGER_VALUE;
  static const Type INTEGER_ARRAY =
    CpArgument_Type_INTEGER_ARRAY;
  static const Type EXPRESSION =
    CpArgument_Type_EXPRESSION;
  static const Type EXPRESSION_ARRAY =
    CpArgument_Type_EXPRESSION_ARRAY;
  static const Type INTERVAL =
    CpArgument_Type_INTERVAL;
  static const Type INTERVAL_ARRAY =
    CpArgument_Type_INTERVAL_ARRAY;
  static const Type SEQUENCE =
    CpArgument_Type_SEQUENCE;
  static const Type SEQUENCE_ARRAY =
    CpArgument_Type_SEQUENCE_ARRAY;
  static const Type INTEGER_MATRIX =
    CpArgument_Type_INTEGER_MATRIX;
  static inline bool Type_IsValid(int value) {
    return CpArgument_Type_IsValid(value);
  }
  static const Type Type_MIN =
    CpArgument_Type_Type_MIN;
  static const Type Type_MAX =
    CpArgument_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    CpArgument_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return CpArgument_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return CpArgument_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return CpArgument_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 argument_index = 1;
  void clear_argument_index();
  static const int kArgumentIndexFieldNumber = 1;
  ::google::protobuf::int32 argument_index() const;
  void set_argument_index(::google::protobuf::int32 value);

  // optional int64 integer_value = 2;
  void clear_integer_value();
  static const int kIntegerValueFieldNumber = 2;
  ::google::protobuf::int64 integer_value() const;
  void set_integer_value(::google::protobuf::int64 value);

  // repeated int64 integer_array = 3;
  int integer_array_size() const;
  void clear_integer_array();
  static const int kIntegerArrayFieldNumber = 3;
  ::google::protobuf::int64 integer_array(int index) const;
  void set_integer_array(int index, ::google::protobuf::int64 value);
  void add_integer_array(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      integer_array() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_integer_array();

  // optional int32 integer_expression_index = 4;
  void clear_integer_expression_index();
  static const int kIntegerExpressionIndexFieldNumber = 4;
  ::google::protobuf::int32 integer_expression_index() const;
  void set_integer_expression_index(::google::protobuf::int32 value);

  // repeated int32 integer_expression_array = 5;
  int integer_expression_array_size() const;
  void clear_integer_expression_array();
  static const int kIntegerExpressionArrayFieldNumber = 5;
  ::google::protobuf::int32 integer_expression_array(int index) const;
  void set_integer_expression_array(int index, ::google::protobuf::int32 value);
  void add_integer_expression_array(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      integer_expression_array() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_integer_expression_array();

  // optional int32 interval_index = 6;
  void clear_interval_index();
  static const int kIntervalIndexFieldNumber = 6;
  ::google::protobuf::int32 interval_index() const;
  void set_interval_index(::google::protobuf::int32 value);

  // repeated int32 interval_array = 7;
  int interval_array_size() const;
  void clear_interval_array();
  static const int kIntervalArrayFieldNumber = 7;
  ::google::protobuf::int32 interval_array(int index) const;
  void set_interval_array(int index, ::google::protobuf::int32 value);
  void add_interval_array(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      interval_array() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_interval_array();

  // optional int32 sequence_index = 8;
  void clear_sequence_index();
  static const int kSequenceIndexFieldNumber = 8;
  ::google::protobuf::int32 sequence_index() const;
  void set_sequence_index(::google::protobuf::int32 value);

  // repeated int32 sequence_array = 9;
  int sequence_array_size() const;
  void clear_sequence_array();
  static const int kSequenceArrayFieldNumber = 9;
  ::google::protobuf::int32 sequence_array(int index) const;
  void set_sequence_array(int index, ::google::protobuf::int32 value);
  void add_sequence_array(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      sequence_array() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_sequence_array();

  // optional .operations_research.CpIntegerMatrix integer_matrix = 10;
  bool has_integer_matrix() const;
  void clear_integer_matrix();
  static const int kIntegerMatrixFieldNumber = 10;
  const ::operations_research::CpIntegerMatrix& integer_matrix() const;
  ::operations_research::CpIntegerMatrix* mutable_integer_matrix();
  ::operations_research::CpIntegerMatrix* release_integer_matrix();
  void set_allocated_integer_matrix(::operations_research::CpIntegerMatrix* integer_matrix);

  // optional .operations_research.CpArgument.Type type = 11;
  void clear_type();
  static const int kTypeFieldNumber = 11;
  ::operations_research::CpArgument_Type type() const;
  void set_type(::operations_research::CpArgument_Type value);

  // @@protoc_insertion_point(class_scope:operations_research.CpArgument)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 integer_value_;
  ::google::protobuf::int32 argument_index_;
  ::google::protobuf::int32 integer_expression_index_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > integer_array_;
  mutable int _integer_array_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > integer_expression_array_;
  mutable int _integer_expression_array_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > interval_array_;
  mutable int _interval_array_cached_byte_size_;
  ::google::protobuf::int32 interval_index_;
  ::google::protobuf::int32 sequence_index_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > sequence_array_;
  mutable int _sequence_array_cached_byte_size_;
  ::operations_research::CpIntegerMatrix* integer_matrix_;
  int type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_constraint_5fsolver_2fmodel_2eproto();
  friend void protobuf_AssignDesc_constraint_5fsolver_2fmodel_2eproto();
  friend void protobuf_ShutdownFile_constraint_5fsolver_2fmodel_2eproto();

  void InitAsDefaultInstance();
  static CpArgument* default_instance_;
};
// -------------------------------------------------------------------

class CpExtension : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.CpExtension) */ {
 public:
  CpExtension();
  virtual ~CpExtension();

  CpExtension(const CpExtension& from);

  inline CpExtension& operator=(const CpExtension& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CpExtension& default_instance();

  void Swap(CpExtension* other);

  // implements Message ----------------------------------------------

  inline CpExtension* New() const { return New(NULL); }

  CpExtension* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CpExtension& from);
  void MergeFrom(const CpExtension& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CpExtension* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type_index = 1;
  void clear_type_index();
  static const int kTypeIndexFieldNumber = 1;
  ::google::protobuf::int32 type_index() const;
  void set_type_index(::google::protobuf::int32 value);

  // repeated .operations_research.CpArgument arguments = 2;
  int arguments_size() const;
  void clear_arguments();
  static const int kArgumentsFieldNumber = 2;
  const ::operations_research::CpArgument& arguments(int index) const;
  ::operations_research::CpArgument* mutable_arguments(int index);
  ::operations_research::CpArgument* add_arguments();
  ::google::protobuf::RepeatedPtrField< ::operations_research::CpArgument >*
      mutable_arguments();
  const ::google::protobuf::RepeatedPtrField< ::operations_research::CpArgument >&
      arguments() const;

  // @@protoc_insertion_point(class_scope:operations_research.CpExtension)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::operations_research::CpArgument > arguments_;
  ::google::protobuf::int32 type_index_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_constraint_5fsolver_2fmodel_2eproto();
  friend void protobuf_AssignDesc_constraint_5fsolver_2fmodel_2eproto();
  friend void protobuf_ShutdownFile_constraint_5fsolver_2fmodel_2eproto();

  void InitAsDefaultInstance();
  static CpExtension* default_instance_;
};
// -------------------------------------------------------------------

class CpIntegerExpression : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.CpIntegerExpression) */ {
 public:
  CpIntegerExpression();
  virtual ~CpIntegerExpression();

  CpIntegerExpression(const CpIntegerExpression& from);

  inline CpIntegerExpression& operator=(const CpIntegerExpression& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CpIntegerExpression& default_instance();

  void Swap(CpIntegerExpression* other);

  // implements Message ----------------------------------------------

  inline CpIntegerExpression* New() const { return New(NULL); }

  CpIntegerExpression* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CpIntegerExpression& from);
  void MergeFrom(const CpIntegerExpression& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CpIntegerExpression* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 index = 1;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::int32 index() const;
  void set_index(::google::protobuf::int32 value);

  // optional int32 type_index = 2;
  void clear_type_index();
  static const int kTypeIndexFieldNumber = 2;
  ::google::protobuf::int32 type_index() const;
  void set_type_index(::google::protobuf::int32 value);

  // optional string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // repeated .operations_research.CpArgument arguments = 4;
  int arguments_size() const;
  void clear_arguments();
  static const int kArgumentsFieldNumber = 4;
  const ::operations_research::CpArgument& arguments(int index) const;
  ::operations_research::CpArgument* mutable_arguments(int index);
  ::operations_research::CpArgument* add_arguments();
  ::google::protobuf::RepeatedPtrField< ::operations_research::CpArgument >*
      mutable_arguments();
  const ::google::protobuf::RepeatedPtrField< ::operations_research::CpArgument >&
      arguments() const;

  // repeated .operations_research.CpExtension extensions = 5;
  int extensions_size() const;
  void clear_extensions();
  static const int kExtensionsFieldNumber = 5;
  const ::operations_research::CpExtension& extensions(int index) const;
  ::operations_research::CpExtension* mutable_extensions(int index);
  ::operations_research::CpExtension* add_extensions();
  ::google::protobuf::RepeatedPtrField< ::operations_research::CpExtension >*
      mutable_extensions();
  const ::google::protobuf::RepeatedPtrField< ::operations_research::CpExtension >&
      extensions() const;

  // @@protoc_insertion_point(class_scope:operations_research.CpIntegerExpression)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 type_index_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::RepeatedPtrField< ::operations_research::CpArgument > arguments_;
  ::google::protobuf::RepeatedPtrField< ::operations_research::CpExtension > extensions_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_constraint_5fsolver_2fmodel_2eproto();
  friend void protobuf_AssignDesc_constraint_5fsolver_2fmodel_2eproto();
  friend void protobuf_ShutdownFile_constraint_5fsolver_2fmodel_2eproto();

  void InitAsDefaultInstance();
  static CpIntegerExpression* default_instance_;
};
// -------------------------------------------------------------------

class CpIntervalVariable : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.CpIntervalVariable) */ {
 public:
  CpIntervalVariable();
  virtual ~CpIntervalVariable();

  CpIntervalVariable(const CpIntervalVariable& from);

  inline CpIntervalVariable& operator=(const CpIntervalVariable& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CpIntervalVariable& default_instance();

  void Swap(CpIntervalVariable* other);

  // implements Message ----------------------------------------------

  inline CpIntervalVariable* New() const { return New(NULL); }

  CpIntervalVariable* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CpIntervalVariable& from);
  void MergeFrom(const CpIntervalVariable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CpIntervalVariable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 index = 1;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::int32 index() const;
  void set_index(::google::protobuf::int32 value);

  // optional int32 type_index = 2;
  void clear_type_index();
  static const int kTypeIndexFieldNumber = 2;
  ::google::protobuf::int32 type_index() const;
  void set_type_index(::google::protobuf::int32 value);

  // optional string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // repeated .operations_research.CpArgument arguments = 4;
  int arguments_size() const;
  void clear_arguments();
  static const int kArgumentsFieldNumber = 4;
  const ::operations_research::CpArgument& arguments(int index) const;
  ::operations_research::CpArgument* mutable_arguments(int index);
  ::operations_research::CpArgument* add_arguments();
  ::google::protobuf::RepeatedPtrField< ::operations_research::CpArgument >*
      mutable_arguments();
  const ::google::protobuf::RepeatedPtrField< ::operations_research::CpArgument >&
      arguments() const;

  // @@protoc_insertion_point(class_scope:operations_research.CpIntervalVariable)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 type_index_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::RepeatedPtrField< ::operations_research::CpArgument > arguments_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_constraint_5fsolver_2fmodel_2eproto();
  friend void protobuf_AssignDesc_constraint_5fsolver_2fmodel_2eproto();
  friend void protobuf_ShutdownFile_constraint_5fsolver_2fmodel_2eproto();

  void InitAsDefaultInstance();
  static CpIntervalVariable* default_instance_;
};
// -------------------------------------------------------------------

class CpSequenceVariable : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.CpSequenceVariable) */ {
 public:
  CpSequenceVariable();
  virtual ~CpSequenceVariable();

  CpSequenceVariable(const CpSequenceVariable& from);

  inline CpSequenceVariable& operator=(const CpSequenceVariable& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CpSequenceVariable& default_instance();

  void Swap(CpSequenceVariable* other);

  // implements Message ----------------------------------------------

  inline CpSequenceVariable* New() const { return New(NULL); }

  CpSequenceVariable* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CpSequenceVariable& from);
  void MergeFrom(const CpSequenceVariable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CpSequenceVariable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 index = 1;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::int32 index() const;
  void set_index(::google::protobuf::int32 value);

  // optional int32 type_index = 2;
  void clear_type_index();
  static const int kTypeIndexFieldNumber = 2;
  ::google::protobuf::int32 type_index() const;
  void set_type_index(::google::protobuf::int32 value);

  // optional string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // repeated .operations_research.CpArgument arguments = 4;
  int arguments_size() const;
  void clear_arguments();
  static const int kArgumentsFieldNumber = 4;
  const ::operations_research::CpArgument& arguments(int index) const;
  ::operations_research::CpArgument* mutable_arguments(int index);
  ::operations_research::CpArgument* add_arguments();
  ::google::protobuf::RepeatedPtrField< ::operations_research::CpArgument >*
      mutable_arguments();
  const ::google::protobuf::RepeatedPtrField< ::operations_research::CpArgument >&
      arguments() const;

  // @@protoc_insertion_point(class_scope:operations_research.CpSequenceVariable)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 type_index_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::RepeatedPtrField< ::operations_research::CpArgument > arguments_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_constraint_5fsolver_2fmodel_2eproto();
  friend void protobuf_AssignDesc_constraint_5fsolver_2fmodel_2eproto();
  friend void protobuf_ShutdownFile_constraint_5fsolver_2fmodel_2eproto();

  void InitAsDefaultInstance();
  static CpSequenceVariable* default_instance_;
};
// -------------------------------------------------------------------

class CpConstraint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.CpConstraint) */ {
 public:
  CpConstraint();
  virtual ~CpConstraint();

  CpConstraint(const CpConstraint& from);

  inline CpConstraint& operator=(const CpConstraint& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CpConstraint& default_instance();

  void Swap(CpConstraint* other);

  // implements Message ----------------------------------------------

  inline CpConstraint* New() const { return New(NULL); }

  CpConstraint* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CpConstraint& from);
  void MergeFrom(const CpConstraint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CpConstraint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 index = 1;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::int32 index() const;
  void set_index(::google::protobuf::int32 value);

  // optional int32 type_index = 2;
  void clear_type_index();
  static const int kTypeIndexFieldNumber = 2;
  ::google::protobuf::int32 type_index() const;
  void set_type_index(::google::protobuf::int32 value);

  // optional string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // repeated .operations_research.CpArgument arguments = 4;
  int arguments_size() const;
  void clear_arguments();
  static const int kArgumentsFieldNumber = 4;
  const ::operations_research::CpArgument& arguments(int index) const;
  ::operations_research::CpArgument* mutable_arguments(int index);
  ::operations_research::CpArgument* add_arguments();
  ::google::protobuf::RepeatedPtrField< ::operations_research::CpArgument >*
      mutable_arguments();
  const ::google::protobuf::RepeatedPtrField< ::operations_research::CpArgument >&
      arguments() const;

  // repeated .operations_research.CpExtension extensions = 5;
  int extensions_size() const;
  void clear_extensions();
  static const int kExtensionsFieldNumber = 5;
  const ::operations_research::CpExtension& extensions(int index) const;
  ::operations_research::CpExtension* mutable_extensions(int index);
  ::operations_research::CpExtension* add_extensions();
  ::google::protobuf::RepeatedPtrField< ::operations_research::CpExtension >*
      mutable_extensions();
  const ::google::protobuf::RepeatedPtrField< ::operations_research::CpExtension >&
      extensions() const;

  // @@protoc_insertion_point(class_scope:operations_research.CpConstraint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 type_index_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::RepeatedPtrField< ::operations_research::CpArgument > arguments_;
  ::google::protobuf::RepeatedPtrField< ::operations_research::CpExtension > extensions_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_constraint_5fsolver_2fmodel_2eproto();
  friend void protobuf_AssignDesc_constraint_5fsolver_2fmodel_2eproto();
  friend void protobuf_ShutdownFile_constraint_5fsolver_2fmodel_2eproto();

  void InitAsDefaultInstance();
  static CpConstraint* default_instance_;
};
// -------------------------------------------------------------------

class CpObjective : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.CpObjective) */ {
 public:
  CpObjective();
  virtual ~CpObjective();

  CpObjective(const CpObjective& from);

  inline CpObjective& operator=(const CpObjective& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CpObjective& default_instance();

  void Swap(CpObjective* other);

  // implements Message ----------------------------------------------

  inline CpObjective* New() const { return New(NULL); }

  CpObjective* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CpObjective& from);
  void MergeFrom(const CpObjective& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CpObjective* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool maximize = 1;
  void clear_maximize();
  static const int kMaximizeFieldNumber = 1;
  bool maximize() const;
  void set_maximize(bool value);

  // optional int64 step = 2;
  void clear_step();
  static const int kStepFieldNumber = 2;
  ::google::protobuf::int64 step() const;
  void set_step(::google::protobuf::int64 value);

  // optional int32 objective_index = 3;
  void clear_objective_index();
  static const int kObjectiveIndexFieldNumber = 3;
  ::google::protobuf::int32 objective_index() const;
  void set_objective_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:operations_research.CpObjective)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 step_;
  bool maximize_;
  ::google::protobuf::int32 objective_index_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_constraint_5fsolver_2fmodel_2eproto();
  friend void protobuf_AssignDesc_constraint_5fsolver_2fmodel_2eproto();
  friend void protobuf_ShutdownFile_constraint_5fsolver_2fmodel_2eproto();

  void InitAsDefaultInstance();
  static CpObjective* default_instance_;
};
// -------------------------------------------------------------------

class CpVariableGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.CpVariableGroup) */ {
 public:
  CpVariableGroup();
  virtual ~CpVariableGroup();

  CpVariableGroup(const CpVariableGroup& from);

  inline CpVariableGroup& operator=(const CpVariableGroup& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CpVariableGroup& default_instance();

  void Swap(CpVariableGroup* other);

  // implements Message ----------------------------------------------

  inline CpVariableGroup* New() const { return New(NULL); }

  CpVariableGroup* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CpVariableGroup& from);
  void MergeFrom(const CpVariableGroup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CpVariableGroup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .operations_research.CpArgument arguments = 1;
  int arguments_size() const;
  void clear_arguments();
  static const int kArgumentsFieldNumber = 1;
  const ::operations_research::CpArgument& arguments(int index) const;
  ::operations_research::CpArgument* mutable_arguments(int index);
  ::operations_research::CpArgument* add_arguments();
  ::google::protobuf::RepeatedPtrField< ::operations_research::CpArgument >*
      mutable_arguments();
  const ::google::protobuf::RepeatedPtrField< ::operations_research::CpArgument >&
      arguments() const;

  // optional string type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // @@protoc_insertion_point(class_scope:operations_research.CpVariableGroup)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::operations_research::CpArgument > arguments_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_constraint_5fsolver_2fmodel_2eproto();
  friend void protobuf_AssignDesc_constraint_5fsolver_2fmodel_2eproto();
  friend void protobuf_ShutdownFile_constraint_5fsolver_2fmodel_2eproto();

  void InitAsDefaultInstance();
  static CpVariableGroup* default_instance_;
};
// -------------------------------------------------------------------

class CpModel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.CpModel) */ {
 public:
  CpModel();
  virtual ~CpModel();

  CpModel(const CpModel& from);

  inline CpModel& operator=(const CpModel& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CpModel& default_instance();

  void Swap(CpModel* other);

  // implements Message ----------------------------------------------

  inline CpModel* New() const { return New(NULL); }

  CpModel* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CpModel& from);
  void MergeFrom(const CpModel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CpModel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string model = 1;
  void clear_model();
  static const int kModelFieldNumber = 1;
  const ::std::string& model() const;
  void set_model(const ::std::string& value);
  void set_model(const char* value);
  void set_model(const char* value, size_t size);
  ::std::string* mutable_model();
  ::std::string* release_model();
  void set_allocated_model(::std::string* model);

  // optional int32 version = 2;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  ::google::protobuf::int32 version() const;
  void set_version(::google::protobuf::int32 value);

  // repeated string tags = 3;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 3;
  const ::std::string& tags(int index) const;
  ::std::string* mutable_tags(int index);
  void set_tags(int index, const ::std::string& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  ::std::string* add_tags();
  void add_tags(const ::std::string& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& tags() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tags();

  // repeated .operations_research.CpIntegerExpression expressions = 4;
  int expressions_size() const;
  void clear_expressions();
  static const int kExpressionsFieldNumber = 4;
  const ::operations_research::CpIntegerExpression& expressions(int index) const;
  ::operations_research::CpIntegerExpression* mutable_expressions(int index);
  ::operations_research::CpIntegerExpression* add_expressions();
  ::google::protobuf::RepeatedPtrField< ::operations_research::CpIntegerExpression >*
      mutable_expressions();
  const ::google::protobuf::RepeatedPtrField< ::operations_research::CpIntegerExpression >&
      expressions() const;

  // repeated .operations_research.CpIntervalVariable intervals = 5;
  int intervals_size() const;
  void clear_intervals();
  static const int kIntervalsFieldNumber = 5;
  const ::operations_research::CpIntervalVariable& intervals(int index) const;
  ::operations_research::CpIntervalVariable* mutable_intervals(int index);
  ::operations_research::CpIntervalVariable* add_intervals();
  ::google::protobuf::RepeatedPtrField< ::operations_research::CpIntervalVariable >*
      mutable_intervals();
  const ::google::protobuf::RepeatedPtrField< ::operations_research::CpIntervalVariable >&
      intervals() const;

  // repeated .operations_research.CpSequenceVariable sequences = 6;
  int sequences_size() const;
  void clear_sequences();
  static const int kSequencesFieldNumber = 6;
  const ::operations_research::CpSequenceVariable& sequences(int index) const;
  ::operations_research::CpSequenceVariable* mutable_sequences(int index);
  ::operations_research::CpSequenceVariable* add_sequences();
  ::google::protobuf::RepeatedPtrField< ::operations_research::CpSequenceVariable >*
      mutable_sequences();
  const ::google::protobuf::RepeatedPtrField< ::operations_research::CpSequenceVariable >&
      sequences() const;

  // repeated .operations_research.CpConstraint constraints = 7;
  int constraints_size() const;
  void clear_constraints();
  static const int kConstraintsFieldNumber = 7;
  const ::operations_research::CpConstraint& constraints(int index) const;
  ::operations_research::CpConstraint* mutable_constraints(int index);
  ::operations_research::CpConstraint* add_constraints();
  ::google::protobuf::RepeatedPtrField< ::operations_research::CpConstraint >*
      mutable_constraints();
  const ::google::protobuf::RepeatedPtrField< ::operations_research::CpConstraint >&
      constraints() const;

  // optional .operations_research.CpObjective objective = 8;
  bool has_objective() const;
  void clear_objective();
  static const int kObjectiveFieldNumber = 8;
  const ::operations_research::CpObjective& objective() const;
  ::operations_research::CpObjective* mutable_objective();
  ::operations_research::CpObjective* release_objective();
  void set_allocated_objective(::operations_research::CpObjective* objective);

  // optional .operations_research.SearchLimitParameters search_limit = 9;
  bool has_search_limit() const;
  void clear_search_limit();
  static const int kSearchLimitFieldNumber = 9;
  const ::operations_research::SearchLimitParameters& search_limit() const;
  ::operations_research::SearchLimitParameters* mutable_search_limit();
  ::operations_research::SearchLimitParameters* release_search_limit();
  void set_allocated_search_limit(::operations_research::SearchLimitParameters* search_limit);

  // repeated .operations_research.CpVariableGroup variable_groups = 10;
  int variable_groups_size() const;
  void clear_variable_groups();
  static const int kVariableGroupsFieldNumber = 10;
  const ::operations_research::CpVariableGroup& variable_groups(int index) const;
  ::operations_research::CpVariableGroup* mutable_variable_groups(int index);
  ::operations_research::CpVariableGroup* add_variable_groups();
  ::google::protobuf::RepeatedPtrField< ::operations_research::CpVariableGroup >*
      mutable_variable_groups();
  const ::google::protobuf::RepeatedPtrField< ::operations_research::CpVariableGroup >&
      variable_groups() const;

  // optional string license_text = 11;
  void clear_license_text();
  static const int kLicenseTextFieldNumber = 11;
  const ::std::string& license_text() const;
  void set_license_text(const ::std::string& value);
  void set_license_text(const char* value);
  void set_license_text(const char* value, size_t size);
  ::std::string* mutable_license_text();
  ::std::string* release_license_text();
  void set_allocated_license_text(::std::string* license_text);

  // @@protoc_insertion_point(class_scope:operations_research.CpModel)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr model_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tags_;
  ::google::protobuf::RepeatedPtrField< ::operations_research::CpIntegerExpression > expressions_;
  ::google::protobuf::RepeatedPtrField< ::operations_research::CpIntervalVariable > intervals_;
  ::google::protobuf::RepeatedPtrField< ::operations_research::CpSequenceVariable > sequences_;
  ::google::protobuf::RepeatedPtrField< ::operations_research::CpConstraint > constraints_;
  ::operations_research::CpObjective* objective_;
  ::operations_research::SearchLimitParameters* search_limit_;
  ::google::protobuf::RepeatedPtrField< ::operations_research::CpVariableGroup > variable_groups_;
  ::google::protobuf::internal::ArenaStringPtr license_text_;
  ::google::protobuf::int32 version_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_constraint_5fsolver_2fmodel_2eproto();
  friend void protobuf_AssignDesc_constraint_5fsolver_2fmodel_2eproto();
  friend void protobuf_ShutdownFile_constraint_5fsolver_2fmodel_2eproto();

  void InitAsDefaultInstance();
  static CpModel* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CpIntegerMatrix

// optional int32 rows = 1;
inline void CpIntegerMatrix::clear_rows() {
  rows_ = 0;
}
inline ::google::protobuf::int32 CpIntegerMatrix::rows() const {
  // @@protoc_insertion_point(field_get:operations_research.CpIntegerMatrix.rows)
  return rows_;
}
inline void CpIntegerMatrix::set_rows(::google::protobuf::int32 value) {
  
  rows_ = value;
  // @@protoc_insertion_point(field_set:operations_research.CpIntegerMatrix.rows)
}

// optional int32 columns = 2;
inline void CpIntegerMatrix::clear_columns() {
  columns_ = 0;
}
inline ::google::protobuf::int32 CpIntegerMatrix::columns() const {
  // @@protoc_insertion_point(field_get:operations_research.CpIntegerMatrix.columns)
  return columns_;
}
inline void CpIntegerMatrix::set_columns(::google::protobuf::int32 value) {
  
  columns_ = value;
  // @@protoc_insertion_point(field_set:operations_research.CpIntegerMatrix.columns)
}

// repeated int64 values = 3;
inline int CpIntegerMatrix::values_size() const {
  return values_.size();
}
inline void CpIntegerMatrix::clear_values() {
  values_.Clear();
}
inline ::google::protobuf::int64 CpIntegerMatrix::values(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.CpIntegerMatrix.values)
  return values_.Get(index);
}
inline void CpIntegerMatrix::set_values(int index, ::google::protobuf::int64 value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.CpIntegerMatrix.values)
}
inline void CpIntegerMatrix::add_values(::google::protobuf::int64 value) {
  values_.Add(value);
  // @@protoc_insertion_point(field_add:operations_research.CpIntegerMatrix.values)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
CpIntegerMatrix::values() const {
  // @@protoc_insertion_point(field_list:operations_research.CpIntegerMatrix.values)
  return values_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
CpIntegerMatrix::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.CpIntegerMatrix.values)
  return &values_;
}

// -------------------------------------------------------------------

// CpArgument

// optional int32 argument_index = 1;
inline void CpArgument::clear_argument_index() {
  argument_index_ = 0;
}
inline ::google::protobuf::int32 CpArgument::argument_index() const {
  // @@protoc_insertion_point(field_get:operations_research.CpArgument.argument_index)
  return argument_index_;
}
inline void CpArgument::set_argument_index(::google::protobuf::int32 value) {
  
  argument_index_ = value;
  // @@protoc_insertion_point(field_set:operations_research.CpArgument.argument_index)
}

// optional int64 integer_value = 2;
inline void CpArgument::clear_integer_value() {
  integer_value_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 CpArgument::integer_value() const {
  // @@protoc_insertion_point(field_get:operations_research.CpArgument.integer_value)
  return integer_value_;
}
inline void CpArgument::set_integer_value(::google::protobuf::int64 value) {
  
  integer_value_ = value;
  // @@protoc_insertion_point(field_set:operations_research.CpArgument.integer_value)
}

// repeated int64 integer_array = 3;
inline int CpArgument::integer_array_size() const {
  return integer_array_.size();
}
inline void CpArgument::clear_integer_array() {
  integer_array_.Clear();
}
inline ::google::protobuf::int64 CpArgument::integer_array(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.CpArgument.integer_array)
  return integer_array_.Get(index);
}
inline void CpArgument::set_integer_array(int index, ::google::protobuf::int64 value) {
  integer_array_.Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.CpArgument.integer_array)
}
inline void CpArgument::add_integer_array(::google::protobuf::int64 value) {
  integer_array_.Add(value);
  // @@protoc_insertion_point(field_add:operations_research.CpArgument.integer_array)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
CpArgument::integer_array() const {
  // @@protoc_insertion_point(field_list:operations_research.CpArgument.integer_array)
  return integer_array_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
CpArgument::mutable_integer_array() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.CpArgument.integer_array)
  return &integer_array_;
}

// optional int32 integer_expression_index = 4;
inline void CpArgument::clear_integer_expression_index() {
  integer_expression_index_ = 0;
}
inline ::google::protobuf::int32 CpArgument::integer_expression_index() const {
  // @@protoc_insertion_point(field_get:operations_research.CpArgument.integer_expression_index)
  return integer_expression_index_;
}
inline void CpArgument::set_integer_expression_index(::google::protobuf::int32 value) {
  
  integer_expression_index_ = value;
  // @@protoc_insertion_point(field_set:operations_research.CpArgument.integer_expression_index)
}

// repeated int32 integer_expression_array = 5;
inline int CpArgument::integer_expression_array_size() const {
  return integer_expression_array_.size();
}
inline void CpArgument::clear_integer_expression_array() {
  integer_expression_array_.Clear();
}
inline ::google::protobuf::int32 CpArgument::integer_expression_array(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.CpArgument.integer_expression_array)
  return integer_expression_array_.Get(index);
}
inline void CpArgument::set_integer_expression_array(int index, ::google::protobuf::int32 value) {
  integer_expression_array_.Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.CpArgument.integer_expression_array)
}
inline void CpArgument::add_integer_expression_array(::google::protobuf::int32 value) {
  integer_expression_array_.Add(value);
  // @@protoc_insertion_point(field_add:operations_research.CpArgument.integer_expression_array)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CpArgument::integer_expression_array() const {
  // @@protoc_insertion_point(field_list:operations_research.CpArgument.integer_expression_array)
  return integer_expression_array_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CpArgument::mutable_integer_expression_array() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.CpArgument.integer_expression_array)
  return &integer_expression_array_;
}

// optional int32 interval_index = 6;
inline void CpArgument::clear_interval_index() {
  interval_index_ = 0;
}
inline ::google::protobuf::int32 CpArgument::interval_index() const {
  // @@protoc_insertion_point(field_get:operations_research.CpArgument.interval_index)
  return interval_index_;
}
inline void CpArgument::set_interval_index(::google::protobuf::int32 value) {
  
  interval_index_ = value;
  // @@protoc_insertion_point(field_set:operations_research.CpArgument.interval_index)
}

// repeated int32 interval_array = 7;
inline int CpArgument::interval_array_size() const {
  return interval_array_.size();
}
inline void CpArgument::clear_interval_array() {
  interval_array_.Clear();
}
inline ::google::protobuf::int32 CpArgument::interval_array(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.CpArgument.interval_array)
  return interval_array_.Get(index);
}
inline void CpArgument::set_interval_array(int index, ::google::protobuf::int32 value) {
  interval_array_.Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.CpArgument.interval_array)
}
inline void CpArgument::add_interval_array(::google::protobuf::int32 value) {
  interval_array_.Add(value);
  // @@protoc_insertion_point(field_add:operations_research.CpArgument.interval_array)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CpArgument::interval_array() const {
  // @@protoc_insertion_point(field_list:operations_research.CpArgument.interval_array)
  return interval_array_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CpArgument::mutable_interval_array() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.CpArgument.interval_array)
  return &interval_array_;
}

// optional int32 sequence_index = 8;
inline void CpArgument::clear_sequence_index() {
  sequence_index_ = 0;
}
inline ::google::protobuf::int32 CpArgument::sequence_index() const {
  // @@protoc_insertion_point(field_get:operations_research.CpArgument.sequence_index)
  return sequence_index_;
}
inline void CpArgument::set_sequence_index(::google::protobuf::int32 value) {
  
  sequence_index_ = value;
  // @@protoc_insertion_point(field_set:operations_research.CpArgument.sequence_index)
}

// repeated int32 sequence_array = 9;
inline int CpArgument::sequence_array_size() const {
  return sequence_array_.size();
}
inline void CpArgument::clear_sequence_array() {
  sequence_array_.Clear();
}
inline ::google::protobuf::int32 CpArgument::sequence_array(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.CpArgument.sequence_array)
  return sequence_array_.Get(index);
}
inline void CpArgument::set_sequence_array(int index, ::google::protobuf::int32 value) {
  sequence_array_.Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.CpArgument.sequence_array)
}
inline void CpArgument::add_sequence_array(::google::protobuf::int32 value) {
  sequence_array_.Add(value);
  // @@protoc_insertion_point(field_add:operations_research.CpArgument.sequence_array)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CpArgument::sequence_array() const {
  // @@protoc_insertion_point(field_list:operations_research.CpArgument.sequence_array)
  return sequence_array_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CpArgument::mutable_sequence_array() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.CpArgument.sequence_array)
  return &sequence_array_;
}

// optional .operations_research.CpIntegerMatrix integer_matrix = 10;
inline bool CpArgument::has_integer_matrix() const {
  return !_is_default_instance_ && integer_matrix_ != NULL;
}
inline void CpArgument::clear_integer_matrix() {
  if (GetArenaNoVirtual() == NULL && integer_matrix_ != NULL) delete integer_matrix_;
  integer_matrix_ = NULL;
}
inline const ::operations_research::CpIntegerMatrix& CpArgument::integer_matrix() const {
  // @@protoc_insertion_point(field_get:operations_research.CpArgument.integer_matrix)
  return integer_matrix_ != NULL ? *integer_matrix_ : *default_instance_->integer_matrix_;
}
inline ::operations_research::CpIntegerMatrix* CpArgument::mutable_integer_matrix() {
  
  if (integer_matrix_ == NULL) {
    integer_matrix_ = new ::operations_research::CpIntegerMatrix;
  }
  // @@protoc_insertion_point(field_mutable:operations_research.CpArgument.integer_matrix)
  return integer_matrix_;
}
inline ::operations_research::CpIntegerMatrix* CpArgument::release_integer_matrix() {
  // @@protoc_insertion_point(field_release:operations_research.CpArgument.integer_matrix)
  
  ::operations_research::CpIntegerMatrix* temp = integer_matrix_;
  integer_matrix_ = NULL;
  return temp;
}
inline void CpArgument::set_allocated_integer_matrix(::operations_research::CpIntegerMatrix* integer_matrix) {
  delete integer_matrix_;
  integer_matrix_ = integer_matrix;
  if (integer_matrix) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:operations_research.CpArgument.integer_matrix)
}

// optional .operations_research.CpArgument.Type type = 11;
inline void CpArgument::clear_type() {
  type_ = 0;
}
inline ::operations_research::CpArgument_Type CpArgument::type() const {
  // @@protoc_insertion_point(field_get:operations_research.CpArgument.type)
  return static_cast< ::operations_research::CpArgument_Type >(type_);
}
inline void CpArgument::set_type(::operations_research::CpArgument_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:operations_research.CpArgument.type)
}

// -------------------------------------------------------------------

// CpExtension

// optional int32 type_index = 1;
inline void CpExtension::clear_type_index() {
  type_index_ = 0;
}
inline ::google::protobuf::int32 CpExtension::type_index() const {
  // @@protoc_insertion_point(field_get:operations_research.CpExtension.type_index)
  return type_index_;
}
inline void CpExtension::set_type_index(::google::protobuf::int32 value) {
  
  type_index_ = value;
  // @@protoc_insertion_point(field_set:operations_research.CpExtension.type_index)
}

// repeated .operations_research.CpArgument arguments = 2;
inline int CpExtension::arguments_size() const {
  return arguments_.size();
}
inline void CpExtension::clear_arguments() {
  arguments_.Clear();
}
inline const ::operations_research::CpArgument& CpExtension::arguments(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.CpExtension.arguments)
  return arguments_.Get(index);
}
inline ::operations_research::CpArgument* CpExtension::mutable_arguments(int index) {
  // @@protoc_insertion_point(field_mutable:operations_research.CpExtension.arguments)
  return arguments_.Mutable(index);
}
inline ::operations_research::CpArgument* CpExtension::add_arguments() {
  // @@protoc_insertion_point(field_add:operations_research.CpExtension.arguments)
  return arguments_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::operations_research::CpArgument >*
CpExtension::mutable_arguments() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.CpExtension.arguments)
  return &arguments_;
}
inline const ::google::protobuf::RepeatedPtrField< ::operations_research::CpArgument >&
CpExtension::arguments() const {
  // @@protoc_insertion_point(field_list:operations_research.CpExtension.arguments)
  return arguments_;
}

// -------------------------------------------------------------------

// CpIntegerExpression

// optional int32 index = 1;
inline void CpIntegerExpression::clear_index() {
  index_ = 0;
}
inline ::google::protobuf::int32 CpIntegerExpression::index() const {
  // @@protoc_insertion_point(field_get:operations_research.CpIntegerExpression.index)
  return index_;
}
inline void CpIntegerExpression::set_index(::google::protobuf::int32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:operations_research.CpIntegerExpression.index)
}

// optional int32 type_index = 2;
inline void CpIntegerExpression::clear_type_index() {
  type_index_ = 0;
}
inline ::google::protobuf::int32 CpIntegerExpression::type_index() const {
  // @@protoc_insertion_point(field_get:operations_research.CpIntegerExpression.type_index)
  return type_index_;
}
inline void CpIntegerExpression::set_type_index(::google::protobuf::int32 value) {
  
  type_index_ = value;
  // @@protoc_insertion_point(field_set:operations_research.CpIntegerExpression.type_index)
}

// optional string name = 3;
inline void CpIntegerExpression::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CpIntegerExpression::name() const {
  // @@protoc_insertion_point(field_get:operations_research.CpIntegerExpression.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CpIntegerExpression::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:operations_research.CpIntegerExpression.name)
}
inline void CpIntegerExpression::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:operations_research.CpIntegerExpression.name)
}
inline void CpIntegerExpression::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:operations_research.CpIntegerExpression.name)
}
inline ::std::string* CpIntegerExpression::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:operations_research.CpIntegerExpression.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CpIntegerExpression::release_name() {
  // @@protoc_insertion_point(field_release:operations_research.CpIntegerExpression.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CpIntegerExpression::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:operations_research.CpIntegerExpression.name)
}

// repeated .operations_research.CpArgument arguments = 4;
inline int CpIntegerExpression::arguments_size() const {
  return arguments_.size();
}
inline void CpIntegerExpression::clear_arguments() {
  arguments_.Clear();
}
inline const ::operations_research::CpArgument& CpIntegerExpression::arguments(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.CpIntegerExpression.arguments)
  return arguments_.Get(index);
}
inline ::operations_research::CpArgument* CpIntegerExpression::mutable_arguments(int index) {
  // @@protoc_insertion_point(field_mutable:operations_research.CpIntegerExpression.arguments)
  return arguments_.Mutable(index);
}
inline ::operations_research::CpArgument* CpIntegerExpression::add_arguments() {
  // @@protoc_insertion_point(field_add:operations_research.CpIntegerExpression.arguments)
  return arguments_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::operations_research::CpArgument >*
CpIntegerExpression::mutable_arguments() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.CpIntegerExpression.arguments)
  return &arguments_;
}
inline const ::google::protobuf::RepeatedPtrField< ::operations_research::CpArgument >&
CpIntegerExpression::arguments() const {
  // @@protoc_insertion_point(field_list:operations_research.CpIntegerExpression.arguments)
  return arguments_;
}

// repeated .operations_research.CpExtension extensions = 5;
inline int CpIntegerExpression::extensions_size() const {
  return extensions_.size();
}
inline void CpIntegerExpression::clear_extensions() {
  extensions_.Clear();
}
inline const ::operations_research::CpExtension& CpIntegerExpression::extensions(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.CpIntegerExpression.extensions)
  return extensions_.Get(index);
}
inline ::operations_research::CpExtension* CpIntegerExpression::mutable_extensions(int index) {
  // @@protoc_insertion_point(field_mutable:operations_research.CpIntegerExpression.extensions)
  return extensions_.Mutable(index);
}
inline ::operations_research::CpExtension* CpIntegerExpression::add_extensions() {
  // @@protoc_insertion_point(field_add:operations_research.CpIntegerExpression.extensions)
  return extensions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::operations_research::CpExtension >*
CpIntegerExpression::mutable_extensions() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.CpIntegerExpression.extensions)
  return &extensions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::operations_research::CpExtension >&
CpIntegerExpression::extensions() const {
  // @@protoc_insertion_point(field_list:operations_research.CpIntegerExpression.extensions)
  return extensions_;
}

// -------------------------------------------------------------------

// CpIntervalVariable

// optional int32 index = 1;
inline void CpIntervalVariable::clear_index() {
  index_ = 0;
}
inline ::google::protobuf::int32 CpIntervalVariable::index() const {
  // @@protoc_insertion_point(field_get:operations_research.CpIntervalVariable.index)
  return index_;
}
inline void CpIntervalVariable::set_index(::google::protobuf::int32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:operations_research.CpIntervalVariable.index)
}

// optional int32 type_index = 2;
inline void CpIntervalVariable::clear_type_index() {
  type_index_ = 0;
}
inline ::google::protobuf::int32 CpIntervalVariable::type_index() const {
  // @@protoc_insertion_point(field_get:operations_research.CpIntervalVariable.type_index)
  return type_index_;
}
inline void CpIntervalVariable::set_type_index(::google::protobuf::int32 value) {
  
  type_index_ = value;
  // @@protoc_insertion_point(field_set:operations_research.CpIntervalVariable.type_index)
}

// optional string name = 3;
inline void CpIntervalVariable::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CpIntervalVariable::name() const {
  // @@protoc_insertion_point(field_get:operations_research.CpIntervalVariable.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CpIntervalVariable::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:operations_research.CpIntervalVariable.name)
}
inline void CpIntervalVariable::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:operations_research.CpIntervalVariable.name)
}
inline void CpIntervalVariable::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:operations_research.CpIntervalVariable.name)
}
inline ::std::string* CpIntervalVariable::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:operations_research.CpIntervalVariable.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CpIntervalVariable::release_name() {
  // @@protoc_insertion_point(field_release:operations_research.CpIntervalVariable.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CpIntervalVariable::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:operations_research.CpIntervalVariable.name)
}

// repeated .operations_research.CpArgument arguments = 4;
inline int CpIntervalVariable::arguments_size() const {
  return arguments_.size();
}
inline void CpIntervalVariable::clear_arguments() {
  arguments_.Clear();
}
inline const ::operations_research::CpArgument& CpIntervalVariable::arguments(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.CpIntervalVariable.arguments)
  return arguments_.Get(index);
}
inline ::operations_research::CpArgument* CpIntervalVariable::mutable_arguments(int index) {
  // @@protoc_insertion_point(field_mutable:operations_research.CpIntervalVariable.arguments)
  return arguments_.Mutable(index);
}
inline ::operations_research::CpArgument* CpIntervalVariable::add_arguments() {
  // @@protoc_insertion_point(field_add:operations_research.CpIntervalVariable.arguments)
  return arguments_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::operations_research::CpArgument >*
CpIntervalVariable::mutable_arguments() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.CpIntervalVariable.arguments)
  return &arguments_;
}
inline const ::google::protobuf::RepeatedPtrField< ::operations_research::CpArgument >&
CpIntervalVariable::arguments() const {
  // @@protoc_insertion_point(field_list:operations_research.CpIntervalVariable.arguments)
  return arguments_;
}

// -------------------------------------------------------------------

// CpSequenceVariable

// optional int32 index = 1;
inline void CpSequenceVariable::clear_index() {
  index_ = 0;
}
inline ::google::protobuf::int32 CpSequenceVariable::index() const {
  // @@protoc_insertion_point(field_get:operations_research.CpSequenceVariable.index)
  return index_;
}
inline void CpSequenceVariable::set_index(::google::protobuf::int32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:operations_research.CpSequenceVariable.index)
}

// optional int32 type_index = 2;
inline void CpSequenceVariable::clear_type_index() {
  type_index_ = 0;
}
inline ::google::protobuf::int32 CpSequenceVariable::type_index() const {
  // @@protoc_insertion_point(field_get:operations_research.CpSequenceVariable.type_index)
  return type_index_;
}
inline void CpSequenceVariable::set_type_index(::google::protobuf::int32 value) {
  
  type_index_ = value;
  // @@protoc_insertion_point(field_set:operations_research.CpSequenceVariable.type_index)
}

// optional string name = 3;
inline void CpSequenceVariable::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CpSequenceVariable::name() const {
  // @@protoc_insertion_point(field_get:operations_research.CpSequenceVariable.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CpSequenceVariable::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:operations_research.CpSequenceVariable.name)
}
inline void CpSequenceVariable::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:operations_research.CpSequenceVariable.name)
}
inline void CpSequenceVariable::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:operations_research.CpSequenceVariable.name)
}
inline ::std::string* CpSequenceVariable::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:operations_research.CpSequenceVariable.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CpSequenceVariable::release_name() {
  // @@protoc_insertion_point(field_release:operations_research.CpSequenceVariable.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CpSequenceVariable::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:operations_research.CpSequenceVariable.name)
}

// repeated .operations_research.CpArgument arguments = 4;
inline int CpSequenceVariable::arguments_size() const {
  return arguments_.size();
}
inline void CpSequenceVariable::clear_arguments() {
  arguments_.Clear();
}
inline const ::operations_research::CpArgument& CpSequenceVariable::arguments(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.CpSequenceVariable.arguments)
  return arguments_.Get(index);
}
inline ::operations_research::CpArgument* CpSequenceVariable::mutable_arguments(int index) {
  // @@protoc_insertion_point(field_mutable:operations_research.CpSequenceVariable.arguments)
  return arguments_.Mutable(index);
}
inline ::operations_research::CpArgument* CpSequenceVariable::add_arguments() {
  // @@protoc_insertion_point(field_add:operations_research.CpSequenceVariable.arguments)
  return arguments_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::operations_research::CpArgument >*
CpSequenceVariable::mutable_arguments() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.CpSequenceVariable.arguments)
  return &arguments_;
}
inline const ::google::protobuf::RepeatedPtrField< ::operations_research::CpArgument >&
CpSequenceVariable::arguments() const {
  // @@protoc_insertion_point(field_list:operations_research.CpSequenceVariable.arguments)
  return arguments_;
}

// -------------------------------------------------------------------

// CpConstraint

// optional int32 index = 1;
inline void CpConstraint::clear_index() {
  index_ = 0;
}
inline ::google::protobuf::int32 CpConstraint::index() const {
  // @@protoc_insertion_point(field_get:operations_research.CpConstraint.index)
  return index_;
}
inline void CpConstraint::set_index(::google::protobuf::int32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:operations_research.CpConstraint.index)
}

// optional int32 type_index = 2;
inline void CpConstraint::clear_type_index() {
  type_index_ = 0;
}
inline ::google::protobuf::int32 CpConstraint::type_index() const {
  // @@protoc_insertion_point(field_get:operations_research.CpConstraint.type_index)
  return type_index_;
}
inline void CpConstraint::set_type_index(::google::protobuf::int32 value) {
  
  type_index_ = value;
  // @@protoc_insertion_point(field_set:operations_research.CpConstraint.type_index)
}

// optional string name = 3;
inline void CpConstraint::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CpConstraint::name() const {
  // @@protoc_insertion_point(field_get:operations_research.CpConstraint.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CpConstraint::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:operations_research.CpConstraint.name)
}
inline void CpConstraint::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:operations_research.CpConstraint.name)
}
inline void CpConstraint::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:operations_research.CpConstraint.name)
}
inline ::std::string* CpConstraint::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:operations_research.CpConstraint.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CpConstraint::release_name() {
  // @@protoc_insertion_point(field_release:operations_research.CpConstraint.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CpConstraint::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:operations_research.CpConstraint.name)
}

// repeated .operations_research.CpArgument arguments = 4;
inline int CpConstraint::arguments_size() const {
  return arguments_.size();
}
inline void CpConstraint::clear_arguments() {
  arguments_.Clear();
}
inline const ::operations_research::CpArgument& CpConstraint::arguments(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.CpConstraint.arguments)
  return arguments_.Get(index);
}
inline ::operations_research::CpArgument* CpConstraint::mutable_arguments(int index) {
  // @@protoc_insertion_point(field_mutable:operations_research.CpConstraint.arguments)
  return arguments_.Mutable(index);
}
inline ::operations_research::CpArgument* CpConstraint::add_arguments() {
  // @@protoc_insertion_point(field_add:operations_research.CpConstraint.arguments)
  return arguments_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::operations_research::CpArgument >*
CpConstraint::mutable_arguments() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.CpConstraint.arguments)
  return &arguments_;
}
inline const ::google::protobuf::RepeatedPtrField< ::operations_research::CpArgument >&
CpConstraint::arguments() const {
  // @@protoc_insertion_point(field_list:operations_research.CpConstraint.arguments)
  return arguments_;
}

// repeated .operations_research.CpExtension extensions = 5;
inline int CpConstraint::extensions_size() const {
  return extensions_.size();
}
inline void CpConstraint::clear_extensions() {
  extensions_.Clear();
}
inline const ::operations_research::CpExtension& CpConstraint::extensions(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.CpConstraint.extensions)
  return extensions_.Get(index);
}
inline ::operations_research::CpExtension* CpConstraint::mutable_extensions(int index) {
  // @@protoc_insertion_point(field_mutable:operations_research.CpConstraint.extensions)
  return extensions_.Mutable(index);
}
inline ::operations_research::CpExtension* CpConstraint::add_extensions() {
  // @@protoc_insertion_point(field_add:operations_research.CpConstraint.extensions)
  return extensions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::operations_research::CpExtension >*
CpConstraint::mutable_extensions() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.CpConstraint.extensions)
  return &extensions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::operations_research::CpExtension >&
CpConstraint::extensions() const {
  // @@protoc_insertion_point(field_list:operations_research.CpConstraint.extensions)
  return extensions_;
}

// -------------------------------------------------------------------

// CpObjective

// optional bool maximize = 1;
inline void CpObjective::clear_maximize() {
  maximize_ = false;
}
inline bool CpObjective::maximize() const {
  // @@protoc_insertion_point(field_get:operations_research.CpObjective.maximize)
  return maximize_;
}
inline void CpObjective::set_maximize(bool value) {
  
  maximize_ = value;
  // @@protoc_insertion_point(field_set:operations_research.CpObjective.maximize)
}

// optional int64 step = 2;
inline void CpObjective::clear_step() {
  step_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 CpObjective::step() const {
  // @@protoc_insertion_point(field_get:operations_research.CpObjective.step)
  return step_;
}
inline void CpObjective::set_step(::google::protobuf::int64 value) {
  
  step_ = value;
  // @@protoc_insertion_point(field_set:operations_research.CpObjective.step)
}

// optional int32 objective_index = 3;
inline void CpObjective::clear_objective_index() {
  objective_index_ = 0;
}
inline ::google::protobuf::int32 CpObjective::objective_index() const {
  // @@protoc_insertion_point(field_get:operations_research.CpObjective.objective_index)
  return objective_index_;
}
inline void CpObjective::set_objective_index(::google::protobuf::int32 value) {
  
  objective_index_ = value;
  // @@protoc_insertion_point(field_set:operations_research.CpObjective.objective_index)
}

// -------------------------------------------------------------------

// CpVariableGroup

// repeated .operations_research.CpArgument arguments = 1;
inline int CpVariableGroup::arguments_size() const {
  return arguments_.size();
}
inline void CpVariableGroup::clear_arguments() {
  arguments_.Clear();
}
inline const ::operations_research::CpArgument& CpVariableGroup::arguments(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.CpVariableGroup.arguments)
  return arguments_.Get(index);
}
inline ::operations_research::CpArgument* CpVariableGroup::mutable_arguments(int index) {
  // @@protoc_insertion_point(field_mutable:operations_research.CpVariableGroup.arguments)
  return arguments_.Mutable(index);
}
inline ::operations_research::CpArgument* CpVariableGroup::add_arguments() {
  // @@protoc_insertion_point(field_add:operations_research.CpVariableGroup.arguments)
  return arguments_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::operations_research::CpArgument >*
CpVariableGroup::mutable_arguments() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.CpVariableGroup.arguments)
  return &arguments_;
}
inline const ::google::protobuf::RepeatedPtrField< ::operations_research::CpArgument >&
CpVariableGroup::arguments() const {
  // @@protoc_insertion_point(field_list:operations_research.CpVariableGroup.arguments)
  return arguments_;
}

// optional string type = 2;
inline void CpVariableGroup::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CpVariableGroup::type() const {
  // @@protoc_insertion_point(field_get:operations_research.CpVariableGroup.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CpVariableGroup::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:operations_research.CpVariableGroup.type)
}
inline void CpVariableGroup::set_type(const char* value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:operations_research.CpVariableGroup.type)
}
inline void CpVariableGroup::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:operations_research.CpVariableGroup.type)
}
inline ::std::string* CpVariableGroup::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:operations_research.CpVariableGroup.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CpVariableGroup::release_type() {
  // @@protoc_insertion_point(field_release:operations_research.CpVariableGroup.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CpVariableGroup::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:operations_research.CpVariableGroup.type)
}

// -------------------------------------------------------------------

// CpModel

// optional string model = 1;
inline void CpModel::clear_model() {
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CpModel::model() const {
  // @@protoc_insertion_point(field_get:operations_research.CpModel.model)
  return model_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CpModel::set_model(const ::std::string& value) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:operations_research.CpModel.model)
}
inline void CpModel::set_model(const char* value) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:operations_research.CpModel.model)
}
inline void CpModel::set_model(const char* value, size_t size) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:operations_research.CpModel.model)
}
inline ::std::string* CpModel::mutable_model() {
  
  // @@protoc_insertion_point(field_mutable:operations_research.CpModel.model)
  return model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CpModel::release_model() {
  // @@protoc_insertion_point(field_release:operations_research.CpModel.model)
  
  return model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CpModel::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    
  } else {
    
  }
  model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:operations_research.CpModel.model)
}

// optional int32 version = 2;
inline void CpModel::clear_version() {
  version_ = 0;
}
inline ::google::protobuf::int32 CpModel::version() const {
  // @@protoc_insertion_point(field_get:operations_research.CpModel.version)
  return version_;
}
inline void CpModel::set_version(::google::protobuf::int32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:operations_research.CpModel.version)
}

// repeated string tags = 3;
inline int CpModel::tags_size() const {
  return tags_.size();
}
inline void CpModel::clear_tags() {
  tags_.Clear();
}
inline const ::std::string& CpModel::tags(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.CpModel.tags)
  return tags_.Get(index);
}
inline ::std::string* CpModel::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:operations_research.CpModel.tags)
  return tags_.Mutable(index);
}
inline void CpModel::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:operations_research.CpModel.tags)
  tags_.Mutable(index)->assign(value);
}
inline void CpModel::set_tags(int index, const char* value) {
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:operations_research.CpModel.tags)
}
inline void CpModel::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:operations_research.CpModel.tags)
}
inline ::std::string* CpModel::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:operations_research.CpModel.tags)
  return tags_.Add();
}
inline void CpModel::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:operations_research.CpModel.tags)
}
inline void CpModel::add_tags(const char* value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:operations_research.CpModel.tags)
}
inline void CpModel::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:operations_research.CpModel.tags)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CpModel::tags() const {
  // @@protoc_insertion_point(field_list:operations_research.CpModel.tags)
  return tags_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CpModel::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.CpModel.tags)
  return &tags_;
}

// repeated .operations_research.CpIntegerExpression expressions = 4;
inline int CpModel::expressions_size() const {
  return expressions_.size();
}
inline void CpModel::clear_expressions() {
  expressions_.Clear();
}
inline const ::operations_research::CpIntegerExpression& CpModel::expressions(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.CpModel.expressions)
  return expressions_.Get(index);
}
inline ::operations_research::CpIntegerExpression* CpModel::mutable_expressions(int index) {
  // @@protoc_insertion_point(field_mutable:operations_research.CpModel.expressions)
  return expressions_.Mutable(index);
}
inline ::operations_research::CpIntegerExpression* CpModel::add_expressions() {
  // @@protoc_insertion_point(field_add:operations_research.CpModel.expressions)
  return expressions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::operations_research::CpIntegerExpression >*
CpModel::mutable_expressions() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.CpModel.expressions)
  return &expressions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::operations_research::CpIntegerExpression >&
CpModel::expressions() const {
  // @@protoc_insertion_point(field_list:operations_research.CpModel.expressions)
  return expressions_;
}

// repeated .operations_research.CpIntervalVariable intervals = 5;
inline int CpModel::intervals_size() const {
  return intervals_.size();
}
inline void CpModel::clear_intervals() {
  intervals_.Clear();
}
inline const ::operations_research::CpIntervalVariable& CpModel::intervals(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.CpModel.intervals)
  return intervals_.Get(index);
}
inline ::operations_research::CpIntervalVariable* CpModel::mutable_intervals(int index) {
  // @@protoc_insertion_point(field_mutable:operations_research.CpModel.intervals)
  return intervals_.Mutable(index);
}
inline ::operations_research::CpIntervalVariable* CpModel::add_intervals() {
  // @@protoc_insertion_point(field_add:operations_research.CpModel.intervals)
  return intervals_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::operations_research::CpIntervalVariable >*
CpModel::mutable_intervals() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.CpModel.intervals)
  return &intervals_;
}
inline const ::google::protobuf::RepeatedPtrField< ::operations_research::CpIntervalVariable >&
CpModel::intervals() const {
  // @@protoc_insertion_point(field_list:operations_research.CpModel.intervals)
  return intervals_;
}

// repeated .operations_research.CpSequenceVariable sequences = 6;
inline int CpModel::sequences_size() const {
  return sequences_.size();
}
inline void CpModel::clear_sequences() {
  sequences_.Clear();
}
inline const ::operations_research::CpSequenceVariable& CpModel::sequences(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.CpModel.sequences)
  return sequences_.Get(index);
}
inline ::operations_research::CpSequenceVariable* CpModel::mutable_sequences(int index) {
  // @@protoc_insertion_point(field_mutable:operations_research.CpModel.sequences)
  return sequences_.Mutable(index);
}
inline ::operations_research::CpSequenceVariable* CpModel::add_sequences() {
  // @@protoc_insertion_point(field_add:operations_research.CpModel.sequences)
  return sequences_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::operations_research::CpSequenceVariable >*
CpModel::mutable_sequences() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.CpModel.sequences)
  return &sequences_;
}
inline const ::google::protobuf::RepeatedPtrField< ::operations_research::CpSequenceVariable >&
CpModel::sequences() const {
  // @@protoc_insertion_point(field_list:operations_research.CpModel.sequences)
  return sequences_;
}

// repeated .operations_research.CpConstraint constraints = 7;
inline int CpModel::constraints_size() const {
  return constraints_.size();
}
inline void CpModel::clear_constraints() {
  constraints_.Clear();
}
inline const ::operations_research::CpConstraint& CpModel::constraints(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.CpModel.constraints)
  return constraints_.Get(index);
}
inline ::operations_research::CpConstraint* CpModel::mutable_constraints(int index) {
  // @@protoc_insertion_point(field_mutable:operations_research.CpModel.constraints)
  return constraints_.Mutable(index);
}
inline ::operations_research::CpConstraint* CpModel::add_constraints() {
  // @@protoc_insertion_point(field_add:operations_research.CpModel.constraints)
  return constraints_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::operations_research::CpConstraint >*
CpModel::mutable_constraints() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.CpModel.constraints)
  return &constraints_;
}
inline const ::google::protobuf::RepeatedPtrField< ::operations_research::CpConstraint >&
CpModel::constraints() const {
  // @@protoc_insertion_point(field_list:operations_research.CpModel.constraints)
  return constraints_;
}

// optional .operations_research.CpObjective objective = 8;
inline bool CpModel::has_objective() const {
  return !_is_default_instance_ && objective_ != NULL;
}
inline void CpModel::clear_objective() {
  if (GetArenaNoVirtual() == NULL && objective_ != NULL) delete objective_;
  objective_ = NULL;
}
inline const ::operations_research::CpObjective& CpModel::objective() const {
  // @@protoc_insertion_point(field_get:operations_research.CpModel.objective)
  return objective_ != NULL ? *objective_ : *default_instance_->objective_;
}
inline ::operations_research::CpObjective* CpModel::mutable_objective() {
  
  if (objective_ == NULL) {
    objective_ = new ::operations_research::CpObjective;
  }
  // @@protoc_insertion_point(field_mutable:operations_research.CpModel.objective)
  return objective_;
}
inline ::operations_research::CpObjective* CpModel::release_objective() {
  // @@protoc_insertion_point(field_release:operations_research.CpModel.objective)
  
  ::operations_research::CpObjective* temp = objective_;
  objective_ = NULL;
  return temp;
}
inline void CpModel::set_allocated_objective(::operations_research::CpObjective* objective) {
  delete objective_;
  objective_ = objective;
  if (objective) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:operations_research.CpModel.objective)
}

// optional .operations_research.SearchLimitParameters search_limit = 9;
inline bool CpModel::has_search_limit() const {
  return !_is_default_instance_ && search_limit_ != NULL;
}
inline void CpModel::clear_search_limit() {
  if (GetArenaNoVirtual() == NULL && search_limit_ != NULL) delete search_limit_;
  search_limit_ = NULL;
}
inline const ::operations_research::SearchLimitParameters& CpModel::search_limit() const {
  // @@protoc_insertion_point(field_get:operations_research.CpModel.search_limit)
  return search_limit_ != NULL ? *search_limit_ : *default_instance_->search_limit_;
}
inline ::operations_research::SearchLimitParameters* CpModel::mutable_search_limit() {
  
  if (search_limit_ == NULL) {
    search_limit_ = new ::operations_research::SearchLimitParameters;
  }
  // @@protoc_insertion_point(field_mutable:operations_research.CpModel.search_limit)
  return search_limit_;
}
inline ::operations_research::SearchLimitParameters* CpModel::release_search_limit() {
  // @@protoc_insertion_point(field_release:operations_research.CpModel.search_limit)
  
  ::operations_research::SearchLimitParameters* temp = search_limit_;
  search_limit_ = NULL;
  return temp;
}
inline void CpModel::set_allocated_search_limit(::operations_research::SearchLimitParameters* search_limit) {
  delete search_limit_;
  search_limit_ = search_limit;
  if (search_limit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:operations_research.CpModel.search_limit)
}

// repeated .operations_research.CpVariableGroup variable_groups = 10;
inline int CpModel::variable_groups_size() const {
  return variable_groups_.size();
}
inline void CpModel::clear_variable_groups() {
  variable_groups_.Clear();
}
inline const ::operations_research::CpVariableGroup& CpModel::variable_groups(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.CpModel.variable_groups)
  return variable_groups_.Get(index);
}
inline ::operations_research::CpVariableGroup* CpModel::mutable_variable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:operations_research.CpModel.variable_groups)
  return variable_groups_.Mutable(index);
}
inline ::operations_research::CpVariableGroup* CpModel::add_variable_groups() {
  // @@protoc_insertion_point(field_add:operations_research.CpModel.variable_groups)
  return variable_groups_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::operations_research::CpVariableGroup >*
CpModel::mutable_variable_groups() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.CpModel.variable_groups)
  return &variable_groups_;
}
inline const ::google::protobuf::RepeatedPtrField< ::operations_research::CpVariableGroup >&
CpModel::variable_groups() const {
  // @@protoc_insertion_point(field_list:operations_research.CpModel.variable_groups)
  return variable_groups_;
}

// optional string license_text = 11;
inline void CpModel::clear_license_text() {
  license_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CpModel::license_text() const {
  // @@protoc_insertion_point(field_get:operations_research.CpModel.license_text)
  return license_text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CpModel::set_license_text(const ::std::string& value) {
  
  license_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:operations_research.CpModel.license_text)
}
inline void CpModel::set_license_text(const char* value) {
  
  license_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:operations_research.CpModel.license_text)
}
inline void CpModel::set_license_text(const char* value, size_t size) {
  
  license_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:operations_research.CpModel.license_text)
}
inline ::std::string* CpModel::mutable_license_text() {
  
  // @@protoc_insertion_point(field_mutable:operations_research.CpModel.license_text)
  return license_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CpModel::release_license_text() {
  // @@protoc_insertion_point(field_release:operations_research.CpModel.license_text)
  
  return license_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CpModel::set_allocated_license_text(::std::string* license_text) {
  if (license_text != NULL) {
    
  } else {
    
  }
  license_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), license_text);
  // @@protoc_insertion_point(field_set_allocated:operations_research.CpModel.license_text)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace operations_research

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::operations_research::CpArgument_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::operations_research::CpArgument_Type>() {
  return ::operations_research::CpArgument_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_constraint_5fsolver_2fmodel_2eproto__INCLUDED
